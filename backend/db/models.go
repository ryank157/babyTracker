// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type DiaperSmellType string

const (
	DiaperSmellTypeNone   DiaperSmellType = "None"
	DiaperSmellTypeMild   DiaperSmellType = "Mild"
	DiaperSmellTypeStrong DiaperSmellType = "Strong"
	DiaperSmellTypeFoul   DiaperSmellType = "Foul"
)

func (e *DiaperSmellType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = DiaperSmellType(s)
	case string:
		*e = DiaperSmellType(s)
	default:
		return fmt.Errorf("unsupported scan type for DiaperSmellType: %T", src)
	}
	return nil
}

type NullDiaperSmellType struct {
	DiaperSmellType DiaperSmellType
	Valid           bool // Valid is true if DiaperSmellType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullDiaperSmellType) Scan(value interface{}) error {
	if value == nil {
		ns.DiaperSmellType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.DiaperSmellType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullDiaperSmellType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.DiaperSmellType), nil
}

type DiaperSoftnessType string

const (
	DiaperSoftnessTypeSoft   DiaperSoftnessType = "Soft"
	DiaperSoftnessTypeMedium DiaperSoftnessType = "Medium"
	DiaperSoftnessTypeFirm   DiaperSoftnessType = "Firm"
)

func (e *DiaperSoftnessType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = DiaperSoftnessType(s)
	case string:
		*e = DiaperSoftnessType(s)
	default:
		return fmt.Errorf("unsupported scan type for DiaperSoftnessType: %T", src)
	}
	return nil
}

type NullDiaperSoftnessType struct {
	DiaperSoftnessType DiaperSoftnessType
	Valid              bool // Valid is true if DiaperSoftnessType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullDiaperSoftnessType) Scan(value interface{}) error {
	if value == nil {
		ns.DiaperSoftnessType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.DiaperSoftnessType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullDiaperSoftnessType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.DiaperSoftnessType), nil
}

type FeedType string

const (
	FeedTypeBreastMilk FeedType = "breast_milk"
	FeedTypeFormula    FeedType = "formula"
	FeedTypeSolids     FeedType = "solids"
)

func (e *FeedType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = FeedType(s)
	case string:
		*e = FeedType(s)
	default:
		return fmt.Errorf("unsupported scan type for FeedType: %T", src)
	}
	return nil
}

type NullFeedType struct {
	FeedType FeedType
	Valid    bool // Valid is true if FeedType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullFeedType) Scan(value interface{}) error {
	if value == nil {
		ns.FeedType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.FeedType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullFeedType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.FeedType), nil
}

type MoodType string

const (
	MoodTypeHappy   MoodType = "Happy"
	MoodTypeFussy   MoodType = "Fussy"
	MoodTypeTired   MoodType = "Tired"
	MoodTypeContent MoodType = "Content"
	MoodTypeGassy   MoodType = "Gassy"
	MoodTypeCrying  MoodType = "Crying"
)

func (e *MoodType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = MoodType(s)
	case string:
		*e = MoodType(s)
	default:
		return fmt.Errorf("unsupported scan type for MoodType: %T", src)
	}
	return nil
}

type NullMoodType struct {
	MoodType MoodType
	Valid    bool // Valid is true if MoodType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullMoodType) Scan(value interface{}) error {
	if value == nil {
		ns.MoodType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.MoodType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullMoodType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.MoodType), nil
}

type SleepQualityType string

const (
	SleepQualityTypeGood        SleepQualityType = "Good"
	SleepQualityTypeRestless    SleepQualityType = "Restless"
	SleepQualityTypeInterrupted SleepQualityType = "Interrupted"
	SleepQualityTypeAwake       SleepQualityType = "Awake"
)

func (e *SleepQualityType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SleepQualityType(s)
	case string:
		*e = SleepQualityType(s)
	default:
		return fmt.Errorf("unsupported scan type for SleepQualityType: %T", src)
	}
	return nil
}

type NullSleepQualityType struct {
	SleepQualityType SleepQualityType
	Valid            bool // Valid is true if SleepQualityType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSleepQualityType) Scan(value interface{}) error {
	if value == nil {
		ns.SleepQualityType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SleepQualityType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSleepQualityType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SleepQualityType), nil
}

type DiaperEvent struct {
	DiaperEventID int32
	EventID       int32
	Poop          *bool
	Smell         NullDiaperSmellType
	Size          *string
	Softness      NullDiaperSoftnessType
	Notes         *string
}

type DoctorAppointmentEvent struct {
	DoctorAppointmentEventID int32
	EventID                  int32
	DoctorName               *string
	Reason                   *string
	Notes                    *string
}

type Event struct {
	EventID   int32
	EventType string
	EventTime pgtype.Timestamptz
	Notes     *string
	Mood      NullMoodType
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
}

type FeedingEvent struct {
	FeedingEventID int32
	EventID        int32
	Amount         pgtype.Numeric
	FeedType       NullFeedType
	Spitup         *bool
	StartTime      pgtype.Timestamptz
	EndTime        pgtype.Timestamptz
	Notes          *string
}

type Medicine struct {
	MedicineID   int32
	MedicineName string
	Description  *string
}

type MedicineEvent struct {
	MedicineEventID int32
	EventID         int32
	MedicineID      *int32
	Dosage          *string
	Unit            *string
	Route           *string
	Notes           *string
}

type SleepEvent struct {
	SleepEventID     int32
	EventID          int32
	StartAttemptTime pgtype.Timestamptz
	ActualSleepTime  pgtype.Timestamptz
	EndTime          pgtype.Timestamptz
	Quality          NullSleepQualityType
	Environment      *string
	Notes            *string
}

type VaccinationEvent struct {
	VaccinationEventID int32
	EventID            int32
	VaccineName        string
	AdministeredBy     *string
	Location           *string
	Notes              *string
}
